// sarcina 1
#include <iostream>
#include <cmath>
#include <vector>
class Lines {
public:
    virtual double f(double x) const = 0;  // Funcție virtuală pură
};

class StraightLine : public Lines {
private:
    double a, b;

public:
    StraightLine(double a, double b) : a(a), b(b) {}

    double f(double x) const override {
        return a * x + b;
    }
};

class Ellipse : public Lines {
private:
    double a, b;

public:
    Ellipse(double a, double b) : a(a), b(b) {}

    double f(double x) const override {
        // Ecuația elipsei: x^2/a^2 + y^2/b^2 = 1
        return b * std::sqrt(1 - x * x / (a * a));
    }
};

class Hyperbola : public Lines {
private:
    double a, b;

public:
    Hyperbola(double a, double b) : a(a), b(b) {}

    double f(double x) const override {
        // Ecuația hiperbolei: x^2/a^2 - y^2/b^2 = 1
        return b * std::sqrt(1 + x * x / (a * a));
    }
};

int main() {
    // Creare și inițializare obiecte
    StraightLine line(2.0, 1.0);
    Ellipse ellipse(3.0, 2.0);
    Hyperbola hyperbola(3.0, 2.0);

    // Creare vector de pointeri la clasa abstractă și adăugare obiecte
    std::vector<Lines*> linesArray;
    linesArray.push_back(&line);
    linesArray.push_back(&ellipse);
    linesArray.push_back(&hyperbola);

    // Testare funcții pentru fiecare obiect din vector
    for (const auto& line : linesArray) {
        for (double x = -2.0; x <= 2.0; x += 0.5) {
            std::cout << "f(" << x << ") = " << line->f(x) << std::endl;
        }
        std::cout << std::endl;
    }

    return 0;
}
